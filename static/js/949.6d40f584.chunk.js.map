{"version":3,"file":"static/js/949.6d40f584.chunk.js","mappings":"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","sources":["components/PhonebookForm/PhonebookForm.styled.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactsList/ContactsList.styled.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ConstactsList.jsx","components/Filter/Filter.jsx","components/PhonebookForm/PhonebookForm.jsx","pages/Phonebook.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst FormContainer = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  border: 1px solid black;\n  padding: 15px;\n`;\n\nconst Label = styled.label`\n  margin-top: 15px;\n  margin-bottom: 5px;\n  &:first-of-type {\n    margin-top: 0;\n  }\n`;\n\nconst FormButton = styled.button`\n  align-self: start;\n  min-width: 100px;\n  margin-top: 15px;\n  cursor: pointer;\n`;\n\nexport { FormContainer, Label, FormButton };\n","import styled from '@emotion/styled';\n\nconst SectionContainer = styled.section`\n  width: 350px;\n  margin: 0 auto;\n`;\n\nexport { SectionContainer };\n","import PropTypes from 'prop-types';\nimport { SectionContainer } from './Section.styled';\n\nfunction Section({ title, children }) {\n  return (\n    <SectionContainer>\n      <h1>{title}</h1>\n      <>{children}</>\n    </SectionContainer>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import styled from '@emotion/styled';\n\nconst ContactsListUl = styled.ul`\n  margin: 0;\n  padding-left: 20px;\n`;\n\nconst ListItemWrapp = styled.div`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n`;\n\nexport { ContactsListUl, ListItemWrapp };\n","import styled from '@emotion/styled';\nimport { TailSpin } from 'react-loader-spinner';\n\nexport const StyledLoader = styled(TailSpin)`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 999;\n`;\n","import { StyledLoader } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <StyledLoader\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      ariaLabel=\"tail-spin-loading\"\n      radius=\"1\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nimport Loader from 'components/Loader';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ListItemWrapp } from '../ContactsList/ContactsList.styled';\n\nconst ContactItem = ({ contact }) => {\n  const [isLoadingDelete, setIsLoadingDelete] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = async id => {\n    setIsLoadingDelete(true);\n    await dispatch(deleteContact(`${id}`));\n    setIsLoadingDelete(false);\n  };\n  return (\n    <li>\n      <ListItemWrapp>\n        <p>\n          {contact.name}: <span>{contact.number}</span>\n        </p>\n\n        <button\n          type=\"button\"\n          id={contact.id}\n          onClick={() => {\n            handleDeleteContact(contact.id);\n          }}\n        >\n          Delete {isLoadingDelete && <Loader />}\n        </button>\n      </ListItemWrapp>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ContactItem;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\n\nimport { selectContacts, selectFilter, selectError } from 'redux/selectors';\nimport { ContactsListUl } from './ContactsList.styled';\nimport { fetchPhonebook } from 'redux/contacts/operations';\nimport ContactItem from 'components/ContactItem';\nimport Loader from 'components/Loader';\n\nconst ContactsList = () => {\n  const [showLoader, setShowLoader] = useState(false);\n\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getPhonebook = async () => {\n      setShowLoader(true);\n      await dispatch(fetchPhonebook());\n      setShowLoader(false);\n    };\n\n    getPhonebook();\n  }, [dispatch]);\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <>\n      {showLoader && !error && <Loader />}\n      <ContactsListUl>\n        {visibleContacts().map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </ContactsListUl>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { toggleFilter } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/selectors';\n\nfunction Filter() {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => {\n          dispatch(toggleFilter(e.target.value));\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Filter;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\n\nimport { FormContainer, Label, FormButton } from './PhonebookForm.styled';\nimport Loader from 'components/Loader/Loader';\nimport { useState } from 'react';\n\nfunction PhonebookForm() {\n  const contacts = useSelector(selectContacts);\n  const initialValues = { name: '', number: '' };\n  const [isLoader, setIsLoader] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const schema = Yup.object().shape({\n    name: Yup.string()\n      .required('Name required')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Invalid name'\n      ),\n    number: Yup.string()\n      .length(9)\n      .required('Number required')\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d/,\n        'Invalid number'\n      ),\n  });\n\n  const handleSubmit = async (values, actions) => {\n    const { name, number } = values;\n    const hasContact = contacts.some(contact => {\n      const normalizedName = contact.name.toLowerCase();\n      return normalizedName === name.toLowerCase();\n    });\n\n    if (!hasContact) {\n      const newContact = {\n        name,\n        number,\n      };\n\n      setIsLoader(true);\n      await dispatch(addContact(newContact));\n      setIsLoader(false);\n      actions.resetForm();\n    } else {\n      alert(`${name} is already in contacts.`);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <FormContainer>\n          <Label htmlFor=\"name\">Name</Label>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage name=\"name\" />\n          <Label htmlFor=\"number\">Number</Label>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <ErrorMessage name=\"number\" />\n          <FormButton type=\"submit\">\n            Add contact {isLoader && <Loader />}\n          </FormButton>\n        </FormContainer>\n      </Form>\n    </Formik>\n  );\n}\n\nexport default PhonebookForm;\n","import Section from 'components/Section';\nimport ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\nimport PhonebookForm from 'components/PhonebookForm';\n\nconst Phonebook = () => {\n  return (\n    <>\n      <Section title={'Phonebook'}>\n        <PhonebookForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n      </Section>\n    </>\n  );\n};\n\nexport default Phonebook;\n"],"names":["FormContainer","styled","Label","FormButton","SectionContainer","title","children","ContactsListUl","ListItemWrapp","StyledLoader","TailSpin","height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","visible","contact","useState","isLoadingDelete","setIsLoadingDelete","dispatch","useDispatch","handleDeleteContact","id","deleteContact","name","number","type","onClick","showLoader","setShowLoader","error","useSelector","selectError","contacts","selectContacts","filter","selectFilter","useEffect","getPhonebook","fetchPhonebook","normalizedFilter","toLowerCase","includes","visibleContacts","map","value","onChange","e","toggleFilter","target","isLoader","setIsLoader","schema","Yup","shape","required","matches","length","handleSubmit","values","actions","some","newContact","addContact","resetForm","alert","initialValues","validationSchema","onSubmit","autoComplete","htmlFor"],"sourceRoot":""}